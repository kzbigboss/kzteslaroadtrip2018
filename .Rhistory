# clear environment
rm(list=ls())
cat("\014")
# load libraries
library(dplyr) #for data manipulation
library(DBI) #for interfacing with a database
library(zoo) #for backfilling NAs along time series
#library(rwunderground) #for downloading weater, deprecated
library(lubridate) #for date/time manupluation
library(jsonlite) #for parsing through JSON
# set working directory
setwd('/Users/kazzazmk/WorkDocs/Repo/kzteslaroadtrip2018')
# source supporting files
source("creds/creds.r")
# define functions
## parse through json statements as a column from db results
parse_json <- function(json_frame, prefix){
for (i in json_frame){
json_parse <- as_tibble(unlist(fromJSON(i)))
json_parse <- as_tibble(cbind(nms = names(json_parse), t(json_parse))) %>%
mutate_all(as.character) #mutating to chr to avoid data typ mismatches when unionion
if (!exists('json_stack')){
json_stack <- json_parse
}else{
json_stack <- json_stack %>% union_all(json_parse)
}
}
json_stack <- json_stack %>% select(-nms)
colnames(json_stack) <- paste(prefix, colnames(json_stack), sep = "_")
json_stack <- json_stack %>% mutate(join_rownum = row_number())
return(json_stack)
}
## add an event label based off unix timestamp
determine_label_event <- function(unixtimestamp){
result = man_trip_times$event[unixtimestamp >= man_trip_times$start & unixtimestamp <= man_trip_times$end]
result = if(length(result) == 0L){'out of bounds'}else{result}
return(result)
}
## add an event day based off unit timestamp
determine_label_day <- function(unixtimestamp){
result = man_trip_times$day[unixtimestamp >= man_trip_times$start & unixtimestamp <= man_trip_times$end]
result = if(length(result) == 0L){0}else{result}
return(result)
}
# connect to db and download results
db <- src_mysql(user = Sys.getenv('db_user')
, password = Sys.getenv('db_pass')
, dbname = Sys.getenv('db_name')
, host = Sys.getenv('db_host')
)
raw_tesladata <- as_tibble(tbl(db, 'tesla_data'))
View(raw_tesladata)
# clear environment
rm(list=ls())
cat("\014")
# load libraries
library(dplyr) #for data manipulation
library(DBI) #for interfacing with a database
library(zoo) #for backfilling NAs along time series
#library(rwunderground) #for downloading weater, deprecated
library(lubridate) #for date/time manupluation
library(jsonlite) #for parsing through JSON
library(knitr)
# set working directory
setwd('/Users/kazzazmk/WorkDocs/Repo/kzteslaroadtrip2018')
# load data
raw_tesladata <- readRDS('kztesla.RDS')
